#include <VulkanSDK/1.2.198.1/Source/SPIRV-Reflect/spirv_reflect.h>
#include <assert.h>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>

//#include <simdjson/simdjson.h> reading not writting !!
#include <json/nlohmann/json.hpp>

/*
GOTCHA's

Interface variables, when multiple stages are present in the pipeline, the variable that goes inbetween 2 stages, output, input, are
called interface variables

Instead of using reflection to get input and output using one function per each type
We can query directly input and output type via interface varialbles, what means that every in/out variable in the shader will be listed
with the storage class being input or output in a single call



*/

const uint32_t triangle_frag[] = {
    0x07230203, 0x00010000, 0x0008000a, 0x00000013, 0x00000000, 0x00020011, 0x00000001, 0x0006000b, 0x00000001, 0x4c534c47, 0x6474732e, 0x3035342e, 0x00000000, 0x0003000e,
    0x00000000, 0x00000001, 0x0007000f, 0x00000004, 0x00000004, 0x6e69616d, 0x00000000, 0x00000009, 0x0000000c, 0x00030010, 0x00000004, 0x00000007, 0x00030003, 0x00000002,
    0x000001c2, 0x00040005, 0x00000004, 0x6e69616d, 0x00000000, 0x00060005, 0x00000009, 0x4674756f, 0x43676172, 0x726f6c6f, 0x00000000, 0x00040005, 0x0000000c, 0x6f436e69,
    0x00726f6c, 0x00040047, 0x00000009, 0x0000001e, 0x00000000, 0x00040047, 0x0000000c, 0x0000001e, 0x00000000, 0x00020013, 0x00000002, 0x00030021, 0x00000003, 0x00000002,
    0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007, 0x00000006, 0x00000004, 0x00040020, 0x00000008, 0x00000003, 0x00000007, 0x0004003b, 0x00000008, 0x00000009,
    0x00000003, 0x00040017, 0x0000000a, 0x00000006, 0x00000003, 0x00040020, 0x0000000b, 0x00000001, 0x0000000a, 0x0004003b, 0x0000000b, 0x0000000c, 0x00000001, 0x0004002b,
    0x00000006, 0x0000000e, 0x3f800000, 0x00050036, 0x00000002, 0x00000004, 0x00000000, 0x00000003, 0x000200f8, 0x00000005, 0x0004003d, 0x0000000a, 0x0000000d, 0x0000000c,
    0x00050051, 0x00000006, 0x0000000f, 0x0000000d, 0x00000000, 0x00050051, 0x00000006, 0x00000010, 0x0000000d, 0x00000001, 0x00050051, 0x00000006, 0x00000011, 0x0000000d,
    0x00000002, 0x00070050, 0x00000007, 0x00000012, 0x0000000f, 0x00000010, 0x00000011, 0x0000000e, 0x0003003e, 0x00000009, 0x00000012, 0x000100fd, 0x00010038};

void recursive_spvreflecttypedescription(nlohmann::json& json_file, const SpvReflectTypeDescription& spvreflectentrypoint, const uint32_t id = 0)
{
    json_file["decoration_flags"] = spvreflectentrypoint.decoration_flags;
    json_file["id"]               = spvreflectentrypoint.id;

    json_file["member_count"] = spvreflectentrypoint.member_count;
    for (uint32_t i = 0; i < spvreflectentrypoint.member_count; ++i)
    {
        recursive_spvreflecttypedescription(json_file["member"][i], spvreflectentrypoint.members[i]);
    }

    json_file["op"]                 = spvreflectentrypoint.op;
    json_file["storage_class"]      = spvreflectentrypoint.storage_class;
    json_file["struct_member_name"] = (spvreflectentrypoint.struct_member_name == NULL) ? "" : spvreflectentrypoint.struct_member_name;

    json_file["traits"]["array"]["dims_count"] = spvreflectentrypoint.traits.array.dims_count;
    for (uint32_t array_index = 0; array_index < spvreflectentrypoint.traits.array.dims_count; array_index++)
    {
        json_file["traits"]["array"]["dims"][array_index] = spvreflectentrypoint.traits.array.dims[array_index];
    }
    json_file["traits"]["array"]["stride"] = spvreflectentrypoint.traits.array.stride;

    json_file["type_flags"] = spvreflectentrypoint.type_flags;
    json_file["type_name"]  = (spvreflectentrypoint.type_name == NULL) ? "" : spvreflectentrypoint.type_name;
}

void recursive_spvreflectblockvariable(nlohmann::json& json_file, const SpvReflectBlockVariable& spvreflectentrypoint)
{
    json_file["spirv_id"]         = spvreflectentrypoint.spirv_id;
    json_file["name"]             = (spvreflectentrypoint.name == nullptr) ? "" : spvreflectentrypoint.name;
    json_file["offset"]           = spvreflectentrypoint.offset;
    json_file["absolute_offset"]  = spvreflectentrypoint.absolute_offset;
    json_file["size"]             = spvreflectentrypoint.size;
    json_file["padded_size"]      = spvreflectentrypoint.padded_size;
    json_file["decoration_flags"] = spvreflectentrypoint.decoration_flags;

    json_file["numeric"]["scalar"]["signedness"] = spvreflectentrypoint.numeric.scalar.signedness;
    json_file["numeric"]["scalar"]["width"]      = spvreflectentrypoint.numeric.scalar.width;

    json_file["numeric"]["vector"]["component_count"] = spvreflectentrypoint.numeric.vector.component_count;

    json_file["numeric"]["matrix"]["column_count"] = spvreflectentrypoint.numeric.matrix.column_count;
    json_file["numeric"]["matrix"]["row_count"]    = spvreflectentrypoint.numeric.matrix.row_count;
    json_file["numeric"]["matrix"]["stride"]       = spvreflectentrypoint.numeric.matrix.stride;

    json_file["array"]["dims_count"] = spvreflectentrypoint.array.dims_count;
    for (uint32_t array_index = 0; array_index < spvreflectentrypoint.array.dims_count; array_index++)
    {
        json_file["array"]["dims"] = spvreflectentrypoint.array.dims[array_index];
    }
    json_file["array"]["stride"] = spvreflectentrypoint.array.stride;

    json_file["flags"]        = spvreflectentrypoint.flags;
    json_file["member_count"] = spvreflectentrypoint.member_count;

    for (uint32_t member = 0; member < spvreflectentrypoint.member_count; ++member)
    {
        recursive_spvreflectblockvariable(json_file["member"][member], spvreflectentrypoint.members[member]);
    }

    if (spvreflectentrypoint.type_description)
    {
        recursive_spvreflecttypedescription(json_file["type_description"], *spvreflectentrypoint.type_description);
    }
};

void recursive_spvreflectdescriptorbinding(nlohmann::json& json_output, const SpvReflectDescriptorBinding* spvreflectentrypoint)
{
    json_output["spirv_id"]               = spvreflectentrypoint->spirv_id;
    json_output["name"]                   = spvreflectentrypoint->name;
    json_output["binding"]                = spvreflectentrypoint->binding;
    json_output["input_attachment_index"] = spvreflectentrypoint->input_attachment_index;
    json_output["set"]                    = spvreflectentrypoint->set;
    json_output["descriptor_type"]        = spvreflectentrypoint->descriptor_type;
    json_output["resource_type"]          = spvreflectentrypoint->resource_type;

    json_output["image"]["arrayed"]      = spvreflectentrypoint->image.arrayed;
    json_output["image"]["depth"]        = spvreflectentrypoint->image.depth;
    json_output["image"]["dim"]          = spvreflectentrypoint->image.dim;
    json_output["image"]["image_format"] = spvreflectentrypoint->image.image_format;
    json_output["image"]["ms"]           = spvreflectentrypoint->image.ms;
    json_output["image"]["sampled"]      = spvreflectentrypoint->image.sampled;

    recursive_spvreflectblockvariable(json_output["block"], spvreflectentrypoint->block);

    json_output["array"]["dims_count"] = spvreflectentrypoint->array.dims_count;

    for (uint32_t dims = 0; dims < spvreflectentrypoint->array.dims_count; ++dims)
    {
        json_output["array"]["dims"] = spvreflectentrypoint->array.dims[dims];
    }

    json_output["count"]    = spvreflectentrypoint->count;
    json_output["accessed"] = spvreflectentrypoint->accessed;

    json_output["uav_counter_id"] = spvreflectentrypoint->uav_counter_id;
    for (uint32_t s = 0; s < spvreflectentrypoint->array.dims_count; ++s)
    {
        recursive_spvreflectdescriptorbinding(json_output["uav_counter_binding"][s], &spvreflectentrypoint->uav_counter_binding[s]);
    }

    if (spvreflectentrypoint->type_description)
    {
        recursive_spvreflecttypedescription(json_output["type_description"], *spvreflectentrypoint->type_description);
    }

    json_output["word_offset"]["binding"] = spvreflectentrypoint->word_offset.binding;
    json_output["word_offset"]["set"]     = spvreflectentrypoint->word_offset.set;
}

void recursive_spvreflectinterfacevariable(nlohmann::json& json_file, const SpvReflectInterfaceVariable& spvreflectentrypoint)
{
    json_file["spirv_id"]         = spvreflectentrypoint.spirv_id;
    json_file["name"]             = (spvreflectentrypoint.name == NULL) ? "" : spvreflectentrypoint.name;
    json_file["location"]         = spvreflectentrypoint.location;
    json_file["storage_class"]    = spvreflectentrypoint.storage_class;
    json_file["semantic"]         = (spvreflectentrypoint.semantic != NULL) ? spvreflectentrypoint.semantic : "";
    json_file["decoration_flags"] = spvreflectentrypoint.decoration_flags;
    json_file["built_in"]         = spvreflectentrypoint.built_in;

    json_file["numeric"]["scalar"]["signedness"] = spvreflectentrypoint.numeric.scalar.signedness;
    json_file["numeric"]["scalar"]["width"]      = spvreflectentrypoint.numeric.scalar.width;

    json_file["numeric"]["vector"]["component_count"] = spvreflectentrypoint.numeric.vector.component_count;

    json_file["numeric"]["matrix"]["column_count"] = spvreflectentrypoint.numeric.matrix.column_count;
    json_file["numeric"]["matrix"]["row_count"]    = spvreflectentrypoint.numeric.matrix.row_count;
    json_file["numeric"]["matrix"]["stride"]       = spvreflectentrypoint.numeric.matrix.stride;

    json_file["array"]["dims_count"] = spvreflectentrypoint.array.dims_count;
    for (uint32_t array_index = 0; array_index < spvreflectentrypoint.array.dims_count; array_index++)
    {
        json_file["array"]["dims"][array_index] = spvreflectentrypoint.array.dims[array_index];
    }

    json_file["member_count"] = spvreflectentrypoint.member_count;
    for (uint32_t i = 0; i < spvreflectentrypoint.member_count; ++i)
    {
        recursive_spvreflectinterfacevariable(json_file["member"][i], spvreflectentrypoint.members[i]);
    }

    json_file["format"] = spvreflectentrypoint.format;

    if (spvreflectentrypoint.type_description)
    {
        recursive_spvreflecttypedescription(json_file["type_description"], *spvreflectentrypoint.type_description);
    }

    json_file["word_offset"]["location"] = spvreflectentrypoint.word_offset.location;
};

const uint32_t pbrIbl[] = {
    0x07230203, 0x00010000, 0x0008000a, 0x00000203, 0x00000000, 0x00020011, 0x00000001, 0x0006000b, 0x00000001, 0x4c534c47, 0x6474732e, 0x3035342e, 0x00000000, 0x0003000e,
    0x00000000, 0x00000001, 0x0009000f, 0x00000004, 0x00000004, 0x6e69616d, 0x00000000, 0x00000140, 0x0000014b, 0x000001fb, 0x00000202, 0x00030010, 0x00000004, 0x00000007,
    0x00030003, 0x00000002, 0x000001c2, 0x00040005, 0x00000004, 0x6e69616d, 0x00000000, 0x00080005, 0x0000000b, 0x68636e55, 0x65747261, 0x6f543264, 0x616d656e, 0x66762870,
    0x00003b33, 0x00030005, 0x0000000a, 0x00000078, 0x00060005, 0x00000011, 0x47475f44, 0x31662858, 0x3b31663b, 0x00000000, 0x00040005, 0x0000000f, 0x4e746f64, 0x00000048,
    0x00050005, 0x00000010, 0x67756f72, 0x73656e68, 0x00000073, 0x00090005, 0x00000017, 0x63535f47, 0x63696c68, 0x696d736b, 0x47476874, 0x31662858, 0x3b31663b, 0x003b3166,
    0x00040005, 0x00000014, 0x4e746f64, 0x0000004c, 0x00040005, 0x00000015, 0x4e746f64, 0x00000056, 0x00050005, 0x00000016, 0x67756f72, 0x73656e68, 0x00000073, 0x00070005,
    0x0000001c, 0x63535f46, 0x63696c68, 0x3166286b, 0x3366763b, 0x0000003b, 0x00050005, 0x0000001a, 0x54736f63, 0x61746568, 0x00000000, 0x00030005, 0x0000001b, 0x00003046,
    0x00080005, 0x00000022, 0x63535f46, 0x63696c68, 0x6628526b, 0x66763b31, 0x31663b33, 0x0000003b, 0x00050005, 0x0000001f, 0x54736f63, 0x61746568, 0x00000000, 0x00030005,
    0x00000020, 0x00003046, 0x00050005, 0x00000021, 0x67756f72, 0x73656e68, 0x00000073, 0x000a0005, 0x00000027, 0x66657270, 0x65746c69, 0x52646572, 0x656c6665, 0x6f697463,
    0x6676286e, 0x31663b33, 0x0000003b, 0x00030005, 0x00000025, 0x00000052, 0x00050005, 0x00000026, 0x67756f72, 0x73656e68, 0x00000073, 0x000d0005, 0x00000030, 0x63657073,
    0x72616c75, 0x746e6f43, 0x75626972, 0x6e6f6974, 0x33667628, 0x3366763b, 0x3366763b, 0x3366763b, 0x3b31663b, 0x003b3166, 0x00030005, 0x0000002a, 0x0000004c, 0x00030005,
    0x0000002b, 0x00000056, 0x00030005, 0x0000002c, 0x0000004e, 0x00030005, 0x0000002d, 0x00003046, 0x00050005, 0x0000002e, 0x6174656d, 0x63696c6c, 0x00000000, 0x00050005,
    0x0000002f, 0x67756f72, 0x73656e68, 0x00000073, 0x00030005, 0x00000032, 0x00000041, 0x00030005, 0x00000034, 0x00000042, 0x00030005, 0x00000036, 0x00000043, 0x00030005,
    0x00000038, 0x00000044, 0x00030005, 0x0000003a, 0x00000045, 0x00030005, 0x0000003c, 0x00000046, 0x00040005, 0x00000062, 0x68706c61, 0x00000061, 0x00040005, 0x00000066,
    0x68706c61, 0x00003261, 0x00040005, 0x0000006a, 0x6f6e6564, 0x0000006d, 0x00030005, 0x0000007c, 0x00000072, 0x00030005, 0x0000007f, 0x0000006b, 0x00030005, 0x00000085,
    0x00004c47, 0x00030005, 0x0000008e, 0x00005647, 0x00030005, 0x000000b7, 0x00646f6c, 0x00040005, 0x000000bb, 0x66646f6c, 0x00000000, 0x00040005, 0x000000be, 0x63646f6c,
    0x00000000, 0x00030005, 0x000000c1, 0x00000061, 0x00060005, 0x000000c5, 0x66657270, 0x65746c69, 0x4d646572, 0x00007061, 0x00030005, 0x000000cc, 0x00000062, 0x00030005,
    0x000000db, 0x00000048, 0x00040005, 0x000000e0, 0x4e746f64, 0x00000048, 0x00040005, 0x000000e6, 0x4e746f64, 0x00000056, 0x00040005, 0x000000eb, 0x4e746f64, 0x0000004c,
    0x00050005, 0x000000f0, 0x6867696c, 0x6c6f4374, 0x0000726f, 0x00040005, 0x000000f2, 0x6f6c6f63, 0x00000072, 0x00030005, 0x000000f9, 0x00000044, 0x00040005, 0x000000fa,
    0x61726170, 0x0000006d, 0x00040005, 0x000000fc, 0x61726170, 0x0000006d, 0x00030005, 0x000000ff, 0x00000047, 0x00040005, 0x00000100, 0x61726170, 0x0000006d, 0x00040005,
    0x00000102, 0x61726170, 0x0000006d, 0x00040005, 0x00000104, 0x61726170, 0x0000006d, 0x00030005, 0x00000107, 0x00000046, 0x00040005, 0x00000108, 0x61726170, 0x0000006d,
    0x00040005, 0x0000010a, 0x61726170, 0x0000006d, 0x00040005, 0x0000010d, 0x63657073, 0x00000000, 0x00030005, 0x0000011c, 0x0000446b, 0x00050005, 0x00000123, 0x68737550,
    0x736e6f43, 0x00007374, 0x00060006, 0x00000123, 0x00000000, 0x67756f72, 0x73656e68, 0x00000073, 0x00060006, 0x00000123, 0x00000001, 0x6174656d, 0x63696c6c, 0x00000000,
    0x00060006, 0x00000123, 0x00000002, 0x63657073, 0x72616c75, 0x00000000, 0x00040006, 0x00000123, 0x00000003, 0x00000072, 0x00040006, 0x00000123, 0x00000004, 0x00000067,
    0x00040006, 0x00000123, 0x00000005, 0x00000062, 0x00050005, 0x00000125, 0x6574616d, 0x6c616972, 0x00000000, 0x00030005, 0x0000013e, 0x0000004e, 0x00050005, 0x00000140,
    0x6f4e6e69, 0x6c616d72, 0x00000000, 0x00030005, 0x00000143, 0x00000056, 0x00030005, 0x00000145, 0x004f4255, 0x00060006, 0x00000145, 0x00000000, 0x6a6f7270, 0x69746365,
    0x00006e6f, 0x00050006, 0x00000145, 0x00000001, 0x65646f6d, 0x0000006c, 0x00050006, 0x00000145, 0x00000002, 0x77656976, 0x00000000, 0x00050006, 0x00000145, 0x00000003,
    0x506d6163, 0x0000736f, 0x00030005, 0x00000147, 0x006f6275, 0x00050005, 0x0000014b, 0x6f576e69, 0x50646c72, 0x0000736f, 0x00030005, 0x0000014f, 0x00000052, 0x00050005,
    0x00000154, 0x6174656d, 0x63696c6c, 0x00000000, 0x00050005, 0x00000158, 0x67756f72, 0x73656e68, 0x00000073, 0x00030005, 0x0000015c, 0x00003046, 0x00030005, 0x0000016a,
    0x00006f4c, 0x00030005, 0x0000016c, 0x00000069, 0x00030005, 0x00000174, 0x0000004c, 0x00050005, 0x00000178, 0x504f4255, 0x6d617261, 0x00000073, 0x00050006, 0x00000178,
    0x00000000, 0x6867696c, 0x00007374, 0x00060006, 0x00000178, 0x00000001, 0x6f707865, 0x65727573, 0x00000000, 0x00050006, 0x00000178, 0x00000002, 0x6d6d6167, 0x00000061,
    0x00050005, 0x0000017a, 0x506f6275, 0x6d617261, 0x00000073, 0x00040005, 0x00000183, 0x61726170, 0x0000006d, 0x00040005, 0x00000185, 0x61726170, 0x0000006d, 0x00040005,
    0x00000187, 0x61726170, 0x0000006d, 0x00040005, 0x00000189, 0x61726170, 0x0000006d, 0x00040005, 0x0000018b, 0x61726170, 0x0000006d, 0x00040005, 0x0000018d, 0x61726170,
    0x0000006d, 0x00040005, 0x00000196, 0x66647262, 0x00000000, 0x00060005, 0x0000019a, 0x706d6173, 0x4272656c, 0x4c464452, 0x00005455, 0x00050005, 0x000001a4, 0x6c666572,
    0x69746365, 0x00006e6f, 0x00040005, 0x000001a5, 0x61726170, 0x0000006d, 0x00040005, 0x000001a7, 0x61726170, 0x0000006d, 0x00050005, 0x000001aa, 0x61727269, 0x6e616964,
    0x00006563, 0x00070005, 0x000001ab, 0x706d6173, 0x4972656c, 0x64617272, 0x636e6169, 0x00000065, 0x00040005, 0x000001b0, 0x66666964, 0x00657375, 0x00030005, 0x000001ba,
    0x00000046, 0x00040005, 0x000001bf, 0x61726170, 0x0000006d, 0x00040005, 0x000001c0, 0x61726170, 0x0000006d, 0x00040005, 0x000001c2, 0x61726170, 0x0000006d, 0x00050005,
    0x000001c5, 0x63657073, 0x72616c75, 0x00000000, 0x00030005, 0x000001d2, 0x0000446b, 0x00040005, 0x000001da, 0x69626d61, 0x00746e65, 0x00040005, 0x000001e0, 0x6f6c6f63,
    0x00000072, 0x00040005, 0x000001e9, 0x61726170, 0x0000006d, 0x00040005, 0x000001ee, 0x61726170, 0x0000006d, 0x00050005, 0x000001fb, 0x4374756f, 0x726f6c6f, 0x00000000,
    0x00040005, 0x00000202, 0x56556e69, 0x00000000, 0x00040047, 0x000000c5, 0x00000022, 0x00000000, 0x00040047, 0x000000c5, 0x00000021, 0x00000004, 0x00050048, 0x00000123,
    0x00000000, 0x00000023, 0x0000000c, 0x00050048, 0x00000123, 0x00000001, 0x00000023, 0x00000010, 0x00050048, 0x00000123, 0x00000002, 0x00000023, 0x00000014, 0x00050048,
    0x00000123, 0x00000003, 0x00000023, 0x00000018, 0x00050048, 0x00000123, 0x00000004, 0x00000023, 0x0000001c, 0x00050048, 0x00000123, 0x00000005, 0x00000023, 0x00000020,
    0x00030047, 0x00000123, 0x00000002, 0x00040047, 0x00000140, 0x0000001e, 0x00000001, 0x00040048, 0x00000145, 0x00000000, 0x00000005, 0x00050048, 0x00000145, 0x00000000,
    0x00000023, 0x00000000, 0x00050048, 0x00000145, 0x00000000, 0x00000007, 0x00000010, 0x00040048, 0x00000145, 0x00000001, 0x00000005, 0x00050048, 0x00000145, 0x00000001,
    0x00000023, 0x00000040, 0x00050048, 0x00000145, 0x00000001, 0x00000007, 0x00000010, 0x00040048, 0x00000145, 0x00000002, 0x00000005, 0x00050048, 0x00000145, 0x00000002,
    0x00000023, 0x00000080, 0x00050048, 0x00000145, 0x00000002, 0x00000007, 0x00000010, 0x00050048, 0x00000145, 0x00000003, 0x00000023, 0x000000c0, 0x00030047, 0x00000145,
    0x00000002, 0x00040047, 0x00000147, 0x00000022, 0x00000000, 0x00040047, 0x00000147, 0x00000021, 0x00000000, 0x00040047, 0x0000014b, 0x0000001e, 0x00000000, 0x00040047,
    0x00000177, 0x00000006, 0x00000010, 0x00050048, 0x00000178, 0x00000000, 0x00000023, 0x00000000, 0x00050048, 0x00000178, 0x00000001, 0x00000023, 0x00000040, 0x00050048,
    0x00000178, 0x00000002, 0x00000023, 0x00000044, 0x00030047, 0x00000178, 0x00000002, 0x00040047, 0x0000017a, 0x00000022, 0x00000000, 0x00040047, 0x0000017a, 0x00000021,
    0x00000001, 0x00040047, 0x0000019a, 0x00000022, 0x00000000, 0x00040047, 0x0000019a, 0x00000021, 0x00000003, 0x00040047, 0x000001ab, 0x00000022, 0x00000000, 0x00040047,
    0x000001ab, 0x00000021, 0x00000002, 0x00040047, 0x000001fb, 0x0000001e, 0x00000000, 0x00040047, 0x00000202, 0x0000001e, 0x00000002, 0x00020013, 0x00000002, 0x00030021,
    0x00000003, 0x00000002, 0x00030016, 0x00000006, 0x00000020, 0x00040017, 0x00000007, 0x00000006, 0x00000003, 0x00040020, 0x00000008, 0x00000007, 0x00000007, 0x00040021,
    0x00000009, 0x00000007, 0x00000008, 0x00040020, 0x0000000d, 0x00000007, 0x00000006, 0x00050021, 0x0000000e, 0x00000006, 0x0000000d, 0x0000000d, 0x00060021, 0x00000013,
    0x00000006, 0x0000000d, 0x0000000d, 0x0000000d, 0x00050021, 0x00000019, 0x00000007, 0x0000000d, 0x00000008, 0x00060021, 0x0000001e, 0x00000007, 0x0000000d, 0x00000008,
    0x0000000d, 0x00050021, 0x00000024, 0x00000007, 0x00000008, 0x0000000d, 0x00090021, 0x00000029, 0x00000007, 0x00000008, 0x00000008, 0x00000008, 0x00000008, 0x0000000d,
    0x0000000d, 0x0004002b, 0x00000006, 0x00000033, 0x3e19999a, 0x0004002b, 0x00000006, 0x00000035, 0x3f000000, 0x0004002b, 0x00000006, 0x00000037, 0x3dcccccd, 0x0004002b,
    0x00000006, 0x00000039, 0x3e4ccccd, 0x0004002b, 0x00000006, 0x0000003b, 0x3ca3d70a, 0x0004002b, 0x00000006, 0x0000003d, 0x3e99999a, 0x0004002b, 0x00000006, 0x0000006f,
    0x3f800000, 0x0004002b, 0x00000006, 0x00000074, 0x40490fdb, 0x0004002b, 0x00000006, 0x00000083, 0x41000000, 0x0004002b, 0x00000006, 0x000000a2, 0x40a00000, 0x0004002b,
    0x00000006, 0x000000b9, 0x41100000, 0x00090019, 0x000000c2, 0x00000006, 0x00000003, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x0003001b, 0x000000c3,
    0x000000c2, 0x00040020, 0x000000c4, 0x00000000, 0x000000c3, 0x0004003b, 0x000000c4, 0x000000c5, 0x00000000, 0x00040017, 0x000000c9, 0x00000006, 0x00000004, 0x0004002b,
    0x00000006, 0x000000e4, 0x00000000, 0x0006002c, 0x00000007, 0x000000f1, 0x0000006f, 0x0000006f, 0x0000006f, 0x0006002c, 0x00000007, 0x000000f3, 0x000000e4, 0x000000e4,
    0x000000e4, 0x00020014, 0x000000f5, 0x0004002b, 0x00000006, 0x00000113, 0x40800000, 0x0004002b, 0x00000006, 0x00000118, 0x3a83126f, 0x0008001e, 0x00000123, 0x00000006,
    0x00000006, 0x00000006, 0x00000006, 0x00000006, 0x00000006, 0x00040020, 0x00000124, 0x00000009, 0x00000123, 0x0004003b, 0x00000124, 0x00000125, 0x00000009, 0x00040015,
    0x00000126, 0x00000020, 0x00000001, 0x0004002b, 0x00000126, 0x00000127, 0x00000003, 0x00040020, 0x00000128, 0x00000009, 0x00000006, 0x0004002b, 0x00000126, 0x0000012b,
    0x00000004, 0x0004002b, 0x00000126, 0x0000012e, 0x00000005, 0x00040020, 0x0000013f, 0x00000001, 0x00000007, 0x0004003b, 0x0000013f, 0x00000140, 0x00000001, 0x00040018,
    0x00000144, 0x000000c9, 0x00000004, 0x0006001e, 0x00000145, 0x00000144, 0x00000144, 0x00000144, 0x00000007, 0x00040020, 0x00000146, 0x00000002, 0x00000145, 0x0004003b,
    0x00000146, 0x00000147, 0x00000002, 0x00040020, 0x00000148, 0x00000002, 0x00000007, 0x0004003b, 0x0000013f, 0x0000014b, 0x00000001, 0x0004002b, 0x00000126, 0x00000155,
    0x00000001, 0x0004002b, 0x00000126, 0x00000159, 0x00000000, 0x0004002b, 0x00000006, 0x0000015d, 0x3d23d70a, 0x0006002c, 0x00000007, 0x0000015e, 0x0000015d, 0x0000015d,
    0x0000015d, 0x00040020, 0x0000016b, 0x00000007, 0x00000126, 0x00040015, 0x00000175, 0x00000020, 0x00000000, 0x0004002b, 0x00000175, 0x00000176, 0x00000004, 0x0004001c,
    0x00000177, 0x000000c9, 0x00000176, 0x0005001e, 0x00000178, 0x00000177, 0x00000006, 0x00000006, 0x00040020, 0x00000179, 0x00000002, 0x00000178, 0x0004003b, 0x00000179,
    0x0000017a, 0x00000002, 0x00040020, 0x0000017c, 0x00000002, 0x000000c9, 0x00040017, 0x00000194, 0x00000006, 0x00000002, 0x00040020, 0x00000195, 0x00000007, 0x00000194,
    0x00090019, 0x00000197, 0x00000006, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x0003001b, 0x00000198, 0x00000197, 0x00040020, 0x00000199,
    0x00000000, 0x00000198, 0x0004003b, 0x00000199, 0x0000019a, 0x00000000, 0x0004003b, 0x000000c4, 0x000001ab, 0x00000000, 0x0004002b, 0x00000175, 0x000001c8, 0x00000000,
    0x0004002b, 0x00000175, 0x000001cc, 0x00000001, 0x00040020, 0x000001e5, 0x00000002, 0x00000006, 0x0004002b, 0x00000006, 0x000001ec, 0x41333333, 0x0006002c, 0x00000007,
    0x000001ed, 0x000001ec, 0x000001ec, 0x000001ec, 0x0004002b, 0x00000126, 0x000001f4, 0x00000002, 0x00040020, 0x000001fa, 0x00000003, 0x000000c9, 0x0004003b, 0x000001fa,
    0x000001fb, 0x00000003, 0x00040020, 0x00000201, 0x00000001, 0x00000194, 0x0004003b, 0x00000201, 0x00000202, 0x00000001, 0x00050036, 0x00000002, 0x00000004, 0x00000000,
    0x00000003, 0x000200f8, 0x00000005, 0x0004003b, 0x00000008, 0x0000013e, 0x00000007, 0x0004003b, 0x00000008, 0x00000143, 0x00000007, 0x0004003b, 0x00000008, 0x0000014f,
    0x00000007, 0x0004003b, 0x0000000d, 0x00000154, 0x00000007, 0x0004003b, 0x0000000d, 0x00000158, 0x00000007, 0x0004003b, 0x00000008, 0x0000015c, 0x00000007, 0x0004003b,
    0x00000008, 0x0000016a, 0x00000007, 0x0004003b, 0x0000016b, 0x0000016c, 0x00000007, 0x0004003b, 0x00000008, 0x00000174, 0x00000007, 0x0004003b, 0x00000008, 0x00000183,
    0x00000007, 0x0004003b, 0x00000008, 0x00000185, 0x00000007, 0x0004003b, 0x00000008, 0x00000187, 0x00000007, 0x0004003b, 0x00000008, 0x00000189, 0x00000007, 0x0004003b,
    0x0000000d, 0x0000018b, 0x00000007, 0x0004003b, 0x0000000d, 0x0000018d, 0x00000007, 0x0004003b, 0x00000195, 0x00000196, 0x00000007, 0x0004003b, 0x00000008, 0x000001a4,
    0x00000007, 0x0004003b, 0x00000008, 0x000001a5, 0x00000007, 0x0004003b, 0x0000000d, 0x000001a7, 0x00000007, 0x0004003b, 0x00000008, 0x000001aa, 0x00000007, 0x0004003b,
    0x00000008, 0x000001b0, 0x00000007, 0x0004003b, 0x00000008, 0x000001ba, 0x00000007, 0x0004003b, 0x0000000d, 0x000001bf, 0x00000007, 0x0004003b, 0x00000008, 0x000001c0,
    0x00000007, 0x0004003b, 0x0000000d, 0x000001c2, 0x00000007, 0x0004003b, 0x00000008, 0x000001c5, 0x00000007, 0x0004003b, 0x00000008, 0x000001d2, 0x00000007, 0x0004003b,
    0x00000008, 0x000001da, 0x00000007, 0x0004003b, 0x00000008, 0x000001e0, 0x00000007, 0x0004003b, 0x00000008, 0x000001e9, 0x00000007, 0x0004003b, 0x00000008, 0x000001ee,
    0x00000007, 0x0004003d, 0x00000007, 0x00000141, 0x00000140, 0x0006000c, 0x00000007, 0x00000142, 0x00000001, 0x00000045, 0x00000141, 0x0003003e, 0x0000013e, 0x00000142,
    0x00050041, 0x00000148, 0x00000149, 0x00000147, 0x00000127, 0x0004003d, 0x00000007, 0x0000014a, 0x00000149, 0x0004003d, 0x00000007, 0x0000014c, 0x0000014b, 0x00050083,
    0x00000007, 0x0000014d, 0x0000014a, 0x0000014c, 0x0006000c, 0x00000007, 0x0000014e, 0x00000001, 0x00000045, 0x0000014d, 0x0003003e, 0x00000143, 0x0000014e, 0x0004003d,
    0x00000007, 0x00000150, 0x00000143, 0x0004007f, 0x00000007, 0x00000151, 0x00000150, 0x0004003d, 0x00000007, 0x00000152, 0x0000013e, 0x0007000c, 0x00000007, 0x00000153,
    0x00000001, 0x00000047, 0x00000151, 0x00000152, 0x0003003e, 0x0000014f, 0x00000153, 0x00050041, 0x00000128, 0x00000156, 0x00000125, 0x00000155, 0x0004003d, 0x00000006,
    0x00000157, 0x00000156, 0x0003003e, 0x00000154, 0x00000157, 0x00050041, 0x00000128, 0x0000015a, 0x00000125, 0x00000159, 0x0004003d, 0x00000006, 0x0000015b, 0x0000015a,
    0x0003003e, 0x00000158, 0x0000015b, 0x0003003e, 0x0000015c, 0x0000015e, 0x0004003d, 0x00000007, 0x0000015f, 0x0000015c, 0x00050041, 0x00000128, 0x00000160, 0x00000125,
    0x00000127, 0x0004003d, 0x00000006, 0x00000161, 0x00000160, 0x00050041, 0x00000128, 0x00000162, 0x00000125, 0x0000012b, 0x0004003d, 0x00000006, 0x00000163, 0x00000162,
    0x00050041, 0x00000128, 0x00000164, 0x00000125, 0x0000012e, 0x0004003d, 0x00000006, 0x00000165, 0x00000164, 0x00060050, 0x00000007, 0x00000166, 0x00000161, 0x00000163,
    0x00000165, 0x0004003d, 0x00000006, 0x00000167, 0x00000154, 0x00060050, 0x00000007, 0x00000168, 0x00000167, 0x00000167, 0x00000167, 0x0008000c, 0x00000007, 0x00000169,
    0x00000001, 0x0000002e, 0x0000015f, 0x00000166, 0x00000168, 0x0003003e, 0x0000015c, 0x00000169, 0x0003003e, 0x0000016a, 0x000000f3, 0x0003003e, 0x0000016c, 0x00000159,
    0x000200f9, 0x0000016d, 0x000200f8, 0x0000016d, 0x000400f6, 0x0000016f, 0x00000170, 0x00000000, 0x000200f9, 0x00000171, 0x000200f8, 0x00000171, 0x0004003d, 0x00000126,
    0x00000172, 0x0000016c, 0x000500b1, 0x000000f5, 0x00000173, 0x00000172, 0x0000012b, 0x000400fa, 0x00000173, 0x0000016e, 0x0000016f, 0x000200f8, 0x0000016e, 0x0004003d,
    0x00000126, 0x0000017b, 0x0000016c, 0x00060041, 0x0000017c, 0x0000017d, 0x0000017a, 0x00000159, 0x0000017b, 0x0004003d, 0x000000c9, 0x0000017e, 0x0000017d, 0x0008004f,
    0x00000007, 0x0000017f, 0x0000017e, 0x0000017e, 0x00000000, 0x00000001, 0x00000002, 0x0004003d, 0x00000007, 0x00000180, 0x0000014b, 0x00050083, 0x00000007, 0x00000181,
    0x0000017f, 0x00000180, 0x0006000c, 0x00000007, 0x00000182, 0x00000001, 0x00000045, 0x00000181, 0x0003003e, 0x00000174, 0x00000182, 0x0004003d, 0x00000007, 0x00000184,
    0x00000174, 0x0003003e, 0x00000183, 0x00000184, 0x0004003d, 0x00000007, 0x00000186, 0x00000143, 0x0003003e, 0x00000185, 0x00000186, 0x0004003d, 0x00000007, 0x00000188,
    0x0000013e, 0x0003003e, 0x00000187, 0x00000188, 0x0004003d, 0x00000007, 0x0000018a, 0x0000015c, 0x0003003e, 0x00000189, 0x0000018a, 0x0004003d, 0x00000006, 0x0000018c,
    0x00000154, 0x0003003e, 0x0000018b, 0x0000018c, 0x0004003d, 0x00000006, 0x0000018e, 0x00000158, 0x0003003e, 0x0000018d, 0x0000018e, 0x000a0039, 0x00000007, 0x0000018f,
    0x00000030, 0x00000183, 0x00000185, 0x00000187, 0x00000189, 0x0000018b, 0x0000018d, 0x0004003d, 0x00000007, 0x00000190, 0x0000016a, 0x00050081, 0x00000007, 0x00000191,
    0x00000190, 0x0000018f, 0x0003003e, 0x0000016a, 0x00000191, 0x000200f9, 0x00000170, 0x000200f8, 0x00000170, 0x0004003d, 0x00000126, 0x00000192, 0x0000016c, 0x00050080,
    0x00000126, 0x00000193, 0x00000192, 0x00000155, 0x0003003e, 0x0000016c, 0x00000193, 0x000200f9, 0x0000016d, 0x000200f8, 0x0000016f, 0x0004003d, 0x00000198, 0x0000019b,
    0x0000019a, 0x0004003d, 0x00000007, 0x0000019c, 0x0000013e, 0x0004003d, 0x00000007, 0x0000019d, 0x00000143, 0x00050094, 0x00000006, 0x0000019e, 0x0000019c, 0x0000019d,
    0x0007000c, 0x00000006, 0x0000019f, 0x00000001, 0x00000028, 0x0000019e, 0x000000e4, 0x0004003d, 0x00000006, 0x000001a0, 0x00000158, 0x00050050, 0x00000194, 0x000001a1,
    0x0000019f, 0x000001a0, 0x00050057, 0x000000c9, 0x000001a2, 0x0000019b, 0x000001a1, 0x0007004f, 0x00000194, 0x000001a3, 0x000001a2, 0x000001a2, 0x00000000, 0x00000001,
    0x0003003e, 0x00000196, 0x000001a3, 0x0004003d, 0x00000007, 0x000001a6, 0x0000014f, 0x0003003e, 0x000001a5, 0x000001a6, 0x0004003d, 0x00000006, 0x000001a8, 0x00000158,
    0x0003003e, 0x000001a7, 0x000001a8, 0x00060039, 0x00000007, 0x000001a9, 0x00000027, 0x000001a5, 0x000001a7, 0x0003003e, 0x000001a4, 0x000001a9, 0x0004003d, 0x000000c3,
    0x000001ac, 0x000001ab, 0x0004003d, 0x00000007, 0x000001ad, 0x0000013e, 0x00050057, 0x000000c9, 0x000001ae, 0x000001ac, 0x000001ad, 0x0008004f, 0x00000007, 0x000001af,
    0x000001ae, 0x000001ae, 0x00000000, 0x00000001, 0x00000002, 0x0003003e, 0x000001aa, 0x000001af, 0x0004003d, 0x00000007, 0x000001b1, 0x000001aa, 0x00050041, 0x00000128,
    0x000001b2, 0x00000125, 0x00000127, 0x0004003d, 0x00000006, 0x000001b3, 0x000001b2, 0x00050041, 0x00000128, 0x000001b4, 0x00000125, 0x0000012b, 0x0004003d, 0x00000006,
    0x000001b5, 0x000001b4, 0x00050041, 0x00000128, 0x000001b6, 0x00000125, 0x0000012e, 0x0004003d, 0x00000006, 0x000001b7, 0x000001b6, 0x00060050, 0x00000007, 0x000001b8,
    0x000001b3, 0x000001b5, 0x000001b7, 0x00050085, 0x00000007, 0x000001b9, 0x000001b1, 0x000001b8, 0x0003003e, 0x000001b0, 0x000001b9, 0x0004003d, 0x00000007, 0x000001bb,
    0x0000013e, 0x0004003d, 0x00000007, 0x000001bc, 0x00000143, 0x00050094, 0x00000006, 0x000001bd, 0x000001bb, 0x000001bc, 0x0007000c, 0x00000006, 0x000001be, 0x00000001,
    0x00000028, 0x000001bd, 0x000000e4, 0x0003003e, 0x000001bf, 0x000001be, 0x0004003d, 0x00000007, 0x000001c1, 0x0000015c, 0x0003003e, 0x000001c0, 0x000001c1, 0x0004003d,
    0x00000006, 0x000001c3, 0x00000158, 0x0003003e, 0x000001c2, 0x000001c3, 0x00070039, 0x00000007, 0x000001c4, 0x00000022, 0x000001bf, 0x000001c0, 0x000001c2, 0x0003003e,
    0x000001ba, 0x000001c4, 0x0004003d, 0x00000007, 0x000001c6, 0x000001a4, 0x0004003d, 0x00000007, 0x000001c7, 0x000001ba, 0x00050041, 0x0000000d, 0x000001c9, 0x00000196,
    0x000001c8, 0x0004003d, 0x00000006, 0x000001ca, 0x000001c9, 0x0005008e, 0x00000007, 0x000001cb, 0x000001c7, 0x000001ca, 0x00050041, 0x0000000d, 0x000001cd, 0x00000196,
    0x000001cc, 0x0004003d, 0x00000006, 0x000001ce, 0x000001cd, 0x00060050, 0x00000007, 0x000001cf, 0x000001ce, 0x000001ce, 0x000001ce, 0x00050081, 0x00000007, 0x000001d0,
    0x000001cb, 0x000001cf, 0x00050085, 0x00000007, 0x000001d1, 0x000001c6, 0x000001d0, 0x0003003e, 0x000001c5, 0x000001d1, 0x0004003d, 0x00000007, 0x000001d3, 0x000001ba,
    0x00060050, 0x00000007, 0x000001d4, 0x0000006f, 0x0000006f, 0x0000006f, 0x00050083, 0x00000007, 0x000001d5, 0x000001d4, 0x000001d3, 0x0003003e, 0x000001d2, 0x000001d5,
    0x0004003d, 0x00000006, 0x000001d6, 0x00000154, 0x00050083, 0x00000006, 0x000001d7, 0x0000006f, 0x000001d6, 0x0004003d, 0x00000007, 0x000001d8, 0x000001d2, 0x0005008e,
    0x00000007, 0x000001d9, 0x000001d8, 0x000001d7, 0x0003003e, 0x000001d2, 0x000001d9, 0x0004003d, 0x00000007, 0x000001db, 0x000001d2, 0x0004003d, 0x00000007, 0x000001dc,
    0x000001b0, 0x00050085, 0x00000007, 0x000001dd, 0x000001db, 0x000001dc, 0x0004003d, 0x00000007, 0x000001de, 0x000001c5, 0x00050081, 0x00000007, 0x000001df, 0x000001dd,
    0x000001de, 0x0003003e, 0x000001da, 0x000001df, 0x0004003d, 0x00000007, 0x000001e1, 0x000001da, 0x0004003d, 0x00000007, 0x000001e2, 0x0000016a, 0x00050081, 0x00000007,
    0x000001e3, 0x000001e1, 0x000001e2, 0x0003003e, 0x000001e0, 0x000001e3, 0x0004003d, 0x00000007, 0x000001e4, 0x000001e0, 0x00050041, 0x000001e5, 0x000001e6, 0x0000017a,
    0x00000155, 0x0004003d, 0x00000006, 0x000001e7, 0x000001e6, 0x0005008e, 0x00000007, 0x000001e8, 0x000001e4, 0x000001e7, 0x0003003e, 0x000001e9, 0x000001e8, 0x00050039,
    0x00000007, 0x000001ea, 0x0000000b, 0x000001e9, 0x0003003e, 0x000001e0, 0x000001ea, 0x0004003d, 0x00000007, 0x000001eb, 0x000001e0, 0x0003003e, 0x000001ee, 0x000001ed,
    0x00050039, 0x00000007, 0x000001ef, 0x0000000b, 0x000001ee, 0x00060050, 0x00000007, 0x000001f0, 0x0000006f, 0x0000006f, 0x0000006f, 0x00050088, 0x00000007, 0x000001f1,
    0x000001f0, 0x000001ef, 0x00050085, 0x00000007, 0x000001f2, 0x000001eb, 0x000001f1, 0x0003003e, 0x000001e0, 0x000001f2, 0x0004003d, 0x00000007, 0x000001f3, 0x000001e0,
    0x00050041, 0x000001e5, 0x000001f5, 0x0000017a, 0x000001f4, 0x0004003d, 0x00000006, 0x000001f6, 0x000001f5, 0x00050088, 0x00000006, 0x000001f7, 0x0000006f, 0x000001f6,
    0x00060050, 0x00000007, 0x000001f8, 0x000001f7, 0x000001f7, 0x000001f7, 0x0007000c, 0x00000007, 0x000001f9, 0x00000001, 0x0000001a, 0x000001f3, 0x000001f8, 0x0003003e,
    0x000001e0, 0x000001f9, 0x0004003d, 0x00000007, 0x000001fc, 0x000001e0, 0x00050051, 0x00000006, 0x000001fd, 0x000001fc, 0x00000000, 0x00050051, 0x00000006, 0x000001fe,
    0x000001fc, 0x00000001, 0x00050051, 0x00000006, 0x000001ff, 0x000001fc, 0x00000002, 0x00070050, 0x000000c9, 0x00000200, 0x000001fd, 0x000001fe, 0x000001ff, 0x0000006f,
    0x0003003e, 0x000001fb, 0x00000200, 0x000100fd, 0x00010038, 0x00050036, 0x00000007, 0x0000000b, 0x00000000, 0x00000009, 0x00030037, 0x00000008, 0x0000000a, 0x000200f8,
    0x0000000c, 0x0004003b, 0x0000000d, 0x00000032, 0x00000007, 0x0004003b, 0x0000000d, 0x00000034, 0x00000007, 0x0004003b, 0x0000000d, 0x00000036, 0x00000007, 0x0004003b,
    0x0000000d, 0x00000038, 0x00000007, 0x0004003b, 0x0000000d, 0x0000003a, 0x00000007, 0x0004003b, 0x0000000d, 0x0000003c, 0x00000007, 0x0003003e, 0x00000032, 0x00000033,
    0x0003003e, 0x00000034, 0x00000035, 0x0003003e, 0x00000036, 0x00000037, 0x0003003e, 0x00000038, 0x00000039, 0x0003003e, 0x0000003a, 0x0000003b, 0x0003003e, 0x0000003c,
    0x0000003d, 0x0004003d, 0x00000007, 0x0000003e, 0x0000000a, 0x0004003d, 0x00000006, 0x0000003f, 0x00000032, 0x0004003d, 0x00000007, 0x00000040, 0x0000000a, 0x0005008e,
    0x00000007, 0x00000041, 0x00000040, 0x0000003f, 0x0004003d, 0x00000006, 0x00000042, 0x00000036, 0x0004003d, 0x00000006, 0x00000043, 0x00000034, 0x00050085, 0x00000006,
    0x00000044, 0x00000042, 0x00000043, 0x00060050, 0x00000007, 0x00000045, 0x00000044, 0x00000044, 0x00000044, 0x00050081, 0x00000007, 0x00000046, 0x00000041, 0x00000045,
    0x00050085, 0x00000007, 0x00000047, 0x0000003e, 0x00000046, 0x0004003d, 0x00000006, 0x00000048, 0x00000038, 0x0004003d, 0x00000006, 0x00000049, 0x0000003a, 0x00050085,
    0x00000006, 0x0000004a, 0x00000048, 0x00000049, 0x00060050, 0x00000007, 0x0000004b, 0x0000004a, 0x0000004a, 0x0000004a, 0x00050081, 0x00000007, 0x0000004c, 0x00000047,
    0x0000004b, 0x0004003d, 0x00000007, 0x0000004d, 0x0000000a, 0x0004003d, 0x00000006, 0x0000004e, 0x00000032, 0x0004003d, 0x00000007, 0x0000004f, 0x0000000a, 0x0005008e,
    0x00000007, 0x00000050, 0x0000004f, 0x0000004e, 0x0004003d, 0x00000006, 0x00000051, 0x00000034, 0x00060050, 0x00000007, 0x00000052, 0x00000051, 0x00000051, 0x00000051,
    0x00050081, 0x00000007, 0x00000053, 0x00000050, 0x00000052, 0x00050085, 0x00000007, 0x00000054, 0x0000004d, 0x00000053, 0x0004003d, 0x00000006, 0x00000055, 0x00000038,
    0x0004003d, 0x00000006, 0x00000056, 0x0000003c, 0x00050085, 0x00000006, 0x00000057, 0x00000055, 0x00000056, 0x00060050, 0x00000007, 0x00000058, 0x00000057, 0x00000057,
    0x00000057, 0x00050081, 0x00000007, 0x00000059, 0x00000054, 0x00000058, 0x00050088, 0x00000007, 0x0000005a, 0x0000004c, 0x00000059, 0x0004003d, 0x00000006, 0x0000005b,
    0x0000003a, 0x0004003d, 0x00000006, 0x0000005c, 0x0000003c, 0x00050088, 0x00000006, 0x0000005d, 0x0000005b, 0x0000005c, 0x00060050, 0x00000007, 0x0000005e, 0x0000005d,
    0x0000005d, 0x0000005d, 0x00050083, 0x00000007, 0x0000005f, 0x0000005a, 0x0000005e, 0x000200fe, 0x0000005f, 0x00010038, 0x00050036, 0x00000006, 0x00000011, 0x00000000,
    0x0000000e, 0x00030037, 0x0000000d, 0x0000000f, 0x00030037, 0x0000000d, 0x00000010, 0x000200f8, 0x00000012, 0x0004003b, 0x0000000d, 0x00000062, 0x00000007, 0x0004003b,
    0x0000000d, 0x00000066, 0x00000007, 0x0004003b, 0x0000000d, 0x0000006a, 0x00000007, 0x0004003d, 0x00000006, 0x00000063, 0x00000010, 0x0004003d, 0x00000006, 0x00000064,
    0x00000010, 0x00050085, 0x00000006, 0x00000065, 0x00000063, 0x00000064, 0x0003003e, 0x00000062, 0x00000065, 0x0004003d, 0x00000006, 0x00000067, 0x00000062, 0x0004003d,
    0x00000006, 0x00000068, 0x00000062, 0x00050085, 0x00000006, 0x00000069, 0x00000067, 0x00000068, 0x0003003e, 0x00000066, 0x00000069, 0x0004003d, 0x00000006, 0x0000006b,
    0x0000000f, 0x0004003d, 0x00000006, 0x0000006c, 0x0000000f, 0x00050085, 0x00000006, 0x0000006d, 0x0000006b, 0x0000006c, 0x0004003d, 0x00000006, 0x0000006e, 0x00000066,
    0x00050083, 0x00000006, 0x00000070, 0x0000006e, 0x0000006f, 0x00050085, 0x00000006, 0x00000071, 0x0000006d, 0x00000070, 0x00050081, 0x00000006, 0x00000072, 0x00000071,
    0x0000006f, 0x0003003e, 0x0000006a, 0x00000072, 0x0004003d, 0x00000006, 0x00000073, 0x00000066, 0x0004003d, 0x00000006, 0x00000075, 0x0000006a, 0x00050085, 0x00000006,
    0x00000076, 0x00000074, 0x00000075, 0x0004003d, 0x00000006, 0x00000077, 0x0000006a, 0x00050085, 0x00000006, 0x00000078, 0x00000076, 0x00000077, 0x00050088, 0x00000006,
    0x00000079, 0x00000073, 0x00000078, 0x000200fe, 0x00000079, 0x00010038, 0x00050036, 0x00000006, 0x00000017, 0x00000000, 0x00000013, 0x00030037, 0x0000000d, 0x00000014,
    0x00030037, 0x0000000d, 0x00000015, 0x00030037, 0x0000000d, 0x00000016, 0x000200f8, 0x00000018, 0x0004003b, 0x0000000d, 0x0000007c, 0x00000007, 0x0004003b, 0x0000000d,
    0x0000007f, 0x00000007, 0x0004003b, 0x0000000d, 0x00000085, 0x00000007, 0x0004003b, 0x0000000d, 0x0000008e, 0x00000007, 0x0004003d, 0x00000006, 0x0000007d, 0x00000016,
    0x00050081, 0x00000006, 0x0000007e, 0x0000007d, 0x0000006f, 0x0003003e, 0x0000007c, 0x0000007e, 0x0004003d, 0x00000006, 0x00000080, 0x0000007c, 0x0004003d, 0x00000006,
    0x00000081, 0x0000007c, 0x00050085, 0x00000006, 0x00000082, 0x00000080, 0x00000081, 0x00050088, 0x00000006, 0x00000084, 0x00000082, 0x00000083, 0x0003003e, 0x0000007f,
    0x00000084, 0x0004003d, 0x00000006, 0x00000086, 0x00000014, 0x0004003d, 0x00000006, 0x00000087, 0x00000014, 0x0004003d, 0x00000006, 0x00000088, 0x0000007f, 0x00050083,
    0x00000006, 0x00000089, 0x0000006f, 0x00000088, 0x00050085, 0x00000006, 0x0000008a, 0x00000087, 0x00000089, 0x0004003d, 0x00000006, 0x0000008b, 0x0000007f, 0x00050081,
    0x00000006, 0x0000008c, 0x0000008a, 0x0000008b, 0x00050088, 0x00000006, 0x0000008d, 0x00000086, 0x0000008c, 0x0003003e, 0x00000085, 0x0000008d, 0x0004003d, 0x00000006,
    0x0000008f, 0x00000015, 0x0004003d, 0x00000006, 0x00000090, 0x00000015, 0x0004003d, 0x00000006, 0x00000091, 0x0000007f, 0x00050083, 0x00000006, 0x00000092, 0x0000006f,
    0x00000091, 0x00050085, 0x00000006, 0x00000093, 0x00000090, 0x00000092, 0x0004003d, 0x00000006, 0x00000094, 0x0000007f, 0x00050081, 0x00000006, 0x00000095, 0x00000093,
    0x00000094, 0x00050088, 0x00000006, 0x00000096, 0x0000008f, 0x00000095, 0x0003003e, 0x0000008e, 0x00000096, 0x0004003d, 0x00000006, 0x00000097, 0x00000085, 0x0004003d,
    0x00000006, 0x00000098, 0x0000008e, 0x00050085, 0x00000006, 0x00000099, 0x00000097, 0x00000098, 0x000200fe, 0x00000099, 0x00010038, 0x00050036, 0x00000007, 0x0000001c,
    0x00000000, 0x00000019, 0x00030037, 0x0000000d, 0x0000001a, 0x00030037, 0x00000008, 0x0000001b, 0x000200f8, 0x0000001d, 0x0004003d, 0x00000007, 0x0000009c, 0x0000001b,
    0x0004003d, 0x00000007, 0x0000009d, 0x0000001b, 0x00060050, 0x00000007, 0x0000009e, 0x0000006f, 0x0000006f, 0x0000006f, 0x00050083, 0x00000007, 0x0000009f, 0x0000009e,
    0x0000009d, 0x0004003d, 0x00000006, 0x000000a0, 0x0000001a, 0x00050083, 0x00000006, 0x000000a1, 0x0000006f, 0x000000a0, 0x0007000c, 0x00000006, 0x000000a3, 0x00000001,
    0x0000001a, 0x000000a1, 0x000000a2, 0x0005008e, 0x00000007, 0x000000a4, 0x0000009f, 0x000000a3, 0x00050081, 0x00000007, 0x000000a5, 0x0000009c, 0x000000a4, 0x000200fe,
    0x000000a5, 0x00010038, 0x00050036, 0x00000007, 0x00000022, 0x00000000, 0x0000001e, 0x00030037, 0x0000000d, 0x0000001f, 0x00030037, 0x00000008, 0x00000020, 0x00030037,
    0x0000000d, 0x00000021, 0x000200f8, 0x00000023, 0x0004003d, 0x00000007, 0x000000a8, 0x00000020, 0x0004003d, 0x00000006, 0x000000a9, 0x00000021, 0x00050083, 0x00000006,
    0x000000aa, 0x0000006f, 0x000000a9, 0x00060050, 0x00000007, 0x000000ab, 0x000000aa, 0x000000aa, 0x000000aa, 0x0004003d, 0x00000007, 0x000000ac, 0x00000020, 0x0007000c,
    0x00000007, 0x000000ad, 0x00000001, 0x00000028, 0x000000ab, 0x000000ac, 0x0004003d, 0x00000007, 0x000000ae, 0x00000020, 0x00050083, 0x00000007, 0x000000af, 0x000000ad,
    0x000000ae, 0x0004003d, 0x00000006, 0x000000b0, 0x0000001f, 0x00050083, 0x00000006, 0x000000b1, 0x0000006f, 0x000000b0, 0x0007000c, 0x00000006, 0x000000b2, 0x00000001,
    0x0000001a, 0x000000b1, 0x000000a2, 0x0005008e, 0x00000007, 0x000000b3, 0x000000af, 0x000000b2, 0x00050081, 0x00000007, 0x000000b4, 0x000000a8, 0x000000b3, 0x000200fe,
    0x000000b4, 0x00010038, 0x00050036, 0x00000007, 0x00000027, 0x00000000, 0x00000024, 0x00030037, 0x00000008, 0x00000025, 0x00030037, 0x0000000d, 0x00000026, 0x000200f8,
    0x00000028, 0x0004003b, 0x0000000d, 0x000000b7, 0x00000007, 0x0004003b, 0x0000000d, 0x000000bb, 0x00000007, 0x0004003b, 0x0000000d, 0x000000be, 0x00000007, 0x0004003b,
    0x00000008, 0x000000c1, 0x00000007, 0x0004003b, 0x00000008, 0x000000cc, 0x00000007, 0x0004003d, 0x00000006, 0x000000b8, 0x00000026, 0x00050085, 0x00000006, 0x000000ba,
    0x000000b8, 0x000000b9, 0x0003003e, 0x000000b7, 0x000000ba, 0x0004003d, 0x00000006, 0x000000bc, 0x000000b7, 0x0006000c, 0x00000006, 0x000000bd, 0x00000001, 0x00000008,
    0x000000bc, 0x0003003e, 0x000000bb, 0x000000bd, 0x0004003d, 0x00000006, 0x000000bf, 0x000000b7, 0x0006000c, 0x00000006, 0x000000c0, 0x00000001, 0x00000009, 0x000000bf,
    0x0003003e, 0x000000be, 0x000000c0, 0x0004003d, 0x000000c3, 0x000000c6, 0x000000c5, 0x0004003d, 0x00000007, 0x000000c7, 0x00000025, 0x0004003d, 0x00000006, 0x000000c8,
    0x000000bb, 0x00070058, 0x000000c9, 0x000000ca, 0x000000c6, 0x000000c7, 0x00000002, 0x000000c8, 0x0008004f, 0x00000007, 0x000000cb, 0x000000ca, 0x000000ca, 0x00000000,
    0x00000001, 0x00000002, 0x0003003e, 0x000000c1, 0x000000cb, 0x0004003d, 0x000000c3, 0x000000cd, 0x000000c5, 0x0004003d, 0x00000007, 0x000000ce, 0x00000025, 0x0004003d,
    0x00000006, 0x000000cf, 0x000000be, 0x00070058, 0x000000c9, 0x000000d0, 0x000000cd, 0x000000ce, 0x00000002, 0x000000cf, 0x0008004f, 0x00000007, 0x000000d1, 0x000000d0,
    0x000000d0, 0x00000000, 0x00000001, 0x00000002, 0x0003003e, 0x000000cc, 0x000000d1, 0x0004003d, 0x00000007, 0x000000d2, 0x000000c1, 0x0004003d, 0x00000007, 0x000000d3,
    0x000000cc, 0x0004003d, 0x00000006, 0x000000d4, 0x000000b7, 0x0004003d, 0x00000006, 0x000000d5, 0x000000bb, 0x00050083, 0x00000006, 0x000000d6, 0x000000d4, 0x000000d5,
    0x00060050, 0x00000007, 0x000000d7, 0x000000d6, 0x000000d6, 0x000000d6, 0x0008000c, 0x00000007, 0x000000d8, 0x00000001, 0x0000002e, 0x000000d2, 0x000000d3, 0x000000d7,
    0x000200fe, 0x000000d8, 0x00010038, 0x00050036, 0x00000007, 0x00000030, 0x00000000, 0x00000029, 0x00030037, 0x00000008, 0x0000002a, 0x00030037, 0x00000008, 0x0000002b,
    0x00030037, 0x00000008, 0x0000002c, 0x00030037, 0x00000008, 0x0000002d, 0x00030037, 0x0000000d, 0x0000002e, 0x00030037, 0x0000000d, 0x0000002f, 0x000200f8, 0x00000031,
    0x0004003b, 0x00000008, 0x000000db, 0x00000007, 0x0004003b, 0x0000000d, 0x000000e0, 0x00000007, 0x0004003b, 0x0000000d, 0x000000e6, 0x00000007, 0x0004003b, 0x0000000d,
    0x000000eb, 0x00000007, 0x0004003b, 0x00000008, 0x000000f0, 0x00000007, 0x0004003b, 0x00000008, 0x000000f2, 0x00000007, 0x0004003b, 0x0000000d, 0x000000f9, 0x00000007,
    0x0004003b, 0x0000000d, 0x000000fa, 0x00000007, 0x0004003b, 0x0000000d, 0x000000fc, 0x00000007, 0x0004003b, 0x0000000d, 0x000000ff, 0x00000007, 0x0004003b, 0x0000000d,
    0x00000100, 0x00000007, 0x0004003b, 0x0000000d, 0x00000102, 0x00000007, 0x0004003b, 0x0000000d, 0x00000104, 0x00000007, 0x0004003b, 0x00000008, 0x00000107, 0x00000007,
    0x0004003b, 0x0000000d, 0x00000108, 0x00000007, 0x0004003b, 0x00000008, 0x0000010a, 0x00000007, 0x0004003b, 0x00000008, 0x0000010d, 0x00000007, 0x0004003b, 0x00000008,
    0x0000011c, 0x00000007, 0x0004003d, 0x00000007, 0x000000dc, 0x0000002b, 0x0004003d, 0x00000007, 0x000000dd, 0x0000002a, 0x00050081, 0x00000007, 0x000000de, 0x000000dc,
    0x000000dd, 0x0006000c, 0x00000007, 0x000000df, 0x00000001, 0x00000045, 0x000000de, 0x0003003e, 0x000000db, 0x000000df, 0x0004003d, 0x00000007, 0x000000e1, 0x0000002c,
    0x0004003d, 0x00000007, 0x000000e2, 0x000000db, 0x00050094, 0x00000006, 0x000000e3, 0x000000e1, 0x000000e2, 0x0008000c, 0x00000006, 0x000000e5, 0x00000001, 0x0000002b,
    0x000000e3, 0x000000e4, 0x0000006f, 0x0003003e, 0x000000e0, 0x000000e5, 0x0004003d, 0x00000007, 0x000000e7, 0x0000002c, 0x0004003d, 0x00000007, 0x000000e8, 0x0000002b,
    0x00050094, 0x00000006, 0x000000e9, 0x000000e7, 0x000000e8, 0x0008000c, 0x00000006, 0x000000ea, 0x00000001, 0x0000002b, 0x000000e9, 0x000000e4, 0x0000006f, 0x0003003e,
    0x000000e6, 0x000000ea, 0x0004003d, 0x00000007, 0x000000ec, 0x0000002c, 0x0004003d, 0x00000007, 0x000000ed, 0x0000002a, 0x00050094, 0x00000006, 0x000000ee, 0x000000ec,
    0x000000ed, 0x0008000c, 0x00000006, 0x000000ef, 0x00000001, 0x0000002b, 0x000000ee, 0x000000e4, 0x0000006f, 0x0003003e, 0x000000eb, 0x000000ef, 0x0003003e, 0x000000f0,
    0x000000f1, 0x0003003e, 0x000000f2, 0x000000f3, 0x0004003d, 0x00000006, 0x000000f4, 0x000000eb, 0x000500ba, 0x000000f5, 0x000000f6, 0x000000f4, 0x000000e4, 0x000300f7,
    0x000000f8, 0x00000000, 0x000400fa, 0x000000f6, 0x000000f7, 0x000000f8, 0x000200f8, 0x000000f7, 0x0004003d, 0x00000006, 0x000000fb, 0x000000e0, 0x0003003e, 0x000000fa,
    0x000000fb, 0x0004003d, 0x00000006, 0x000000fd, 0x0000002f, 0x0003003e, 0x000000fc, 0x000000fd, 0x00060039, 0x00000006, 0x000000fe, 0x00000011, 0x000000fa, 0x000000fc,
    0x0003003e, 0x000000f9, 0x000000fe, 0x0004003d, 0x00000006, 0x00000101, 0x000000eb, 0x0003003e, 0x00000100, 0x00000101, 0x0004003d, 0x00000006, 0x00000103, 0x000000e6,
    0x0003003e, 0x00000102, 0x00000103, 0x0004003d, 0x00000006, 0x00000105, 0x0000002f, 0x0003003e, 0x00000104, 0x00000105, 0x00070039, 0x00000006, 0x00000106, 0x00000017,
    0x00000100, 0x00000102, 0x00000104, 0x0003003e, 0x000000ff, 0x00000106, 0x0004003d, 0x00000006, 0x00000109, 0x000000e6, 0x0003003e, 0x00000108, 0x00000109, 0x0004003d,
    0x00000007, 0x0000010b, 0x0000002d, 0x0003003e, 0x0000010a, 0x0000010b, 0x00060039, 0x00000007, 0x0000010c, 0x0000001c, 0x00000108, 0x0000010a, 0x0003003e, 0x00000107,
    0x0000010c, 0x0004003d, 0x00000006, 0x0000010e, 0x000000f9, 0x0004003d, 0x00000007, 0x0000010f, 0x00000107, 0x0005008e, 0x00000007, 0x00000110, 0x0000010f, 0x0000010e,
    0x0004003d, 0x00000006, 0x00000111, 0x000000ff, 0x0005008e, 0x00000007, 0x00000112, 0x00000110, 0x00000111, 0x0004003d, 0x00000006, 0x00000114, 0x000000eb, 0x00050085,
    0x00000006, 0x00000115, 0x00000113, 0x00000114, 0x0004003d, 0x00000006, 0x00000116, 0x000000e6, 0x00050085, 0x00000006, 0x00000117, 0x00000115, 0x00000116, 0x00050081,
    0x00000006, 0x00000119, 0x00000117, 0x00000118, 0x00060050, 0x00000007, 0x0000011a, 0x00000119, 0x00000119, 0x00000119, 0x00050088, 0x00000007, 0x0000011b, 0x00000112,
    0x0000011a, 0x0003003e, 0x0000010d, 0x0000011b, 0x0004003d, 0x00000007, 0x0000011d, 0x00000107, 0x00050083, 0x00000007, 0x0000011e, 0x000000f1, 0x0000011d, 0x0004003d,
    0x00000006, 0x0000011f, 0x0000002e, 0x00050083, 0x00000006, 0x00000120, 0x0000006f, 0x0000011f, 0x0005008e, 0x00000007, 0x00000121, 0x0000011e, 0x00000120, 0x0003003e,
    0x0000011c, 0x00000121, 0x0004003d, 0x00000007, 0x00000122, 0x0000011c, 0x00050041, 0x00000128, 0x00000129, 0x00000125, 0x00000127, 0x0004003d, 0x00000006, 0x0000012a,
    0x00000129, 0x00050041, 0x00000128, 0x0000012c, 0x00000125, 0x0000012b, 0x0004003d, 0x00000006, 0x0000012d, 0x0000012c, 0x00050041, 0x00000128, 0x0000012f, 0x00000125,
    0x0000012e, 0x0004003d, 0x00000006, 0x00000130, 0x0000012f, 0x00060050, 0x00000007, 0x00000131, 0x0000012a, 0x0000012d, 0x00000130, 0x00050085, 0x00000007, 0x00000132,
    0x00000122, 0x00000131, 0x00060050, 0x00000007, 0x00000133, 0x00000074, 0x00000074, 0x00000074, 0x00050088, 0x00000007, 0x00000134, 0x00000132, 0x00000133, 0x0004003d,
    0x00000007, 0x00000135, 0x0000010d, 0x00050081, 0x00000007, 0x00000136, 0x00000134, 0x00000135, 0x0004003d, 0x00000006, 0x00000137, 0x000000eb, 0x0005008e, 0x00000007,
    0x00000138, 0x00000136, 0x00000137, 0x0004003d, 0x00000007, 0x00000139, 0x000000f2, 0x00050081, 0x00000007, 0x0000013a, 0x00000139, 0x00000138, 0x0003003e, 0x000000f2,
    0x0000013a, 0x000200f9, 0x000000f8, 0x000200f8, 0x000000f8, 0x0004003d, 0x00000007, 0x0000013b, 0x000000f2, 0x000200fe, 0x0000013b, 0x00010038

};

void create_json_reflection(const SpvReflectEntryPoint* spvreflectentrypoint, const std::string file)
{
    if (!spvreflectentrypoint)
    {
        return;
    }

    std::string hexadecimal_file = file + "_hex.spv";

    nlohmann::json json_output;
    json_output["name"]                  = spvreflectentrypoint->name;
    json_output["id"]                    = spvreflectentrypoint->id;
    json_output["spirv_execution_model"] = spvreflectentrypoint->spirv_execution_model;
    json_output["shader_stage"]          = spvreflectentrypoint->shader_stage;

    json_output["input_variable_count"] = spvreflectentrypoint->input_variable_count;
    for (uint32_t i = 0; i < spvreflectentrypoint->input_variable_count; ++i)
    {
        recursive_spvreflectinterfacevariable(json_output["input_variables"][i], *spvreflectentrypoint->input_variables[i]);
    }

    json_output["output_variable_count"] = spvreflectentrypoint->output_variable_count;
    for (uint32_t i = 0; i < spvreflectentrypoint->output_variable_count; ++i)
    {
        recursive_spvreflectinterfacevariable(json_output["output_variables"][i], *spvreflectentrypoint->output_variables[i]);
    }

    json_output["interface_variable_count"] = spvreflectentrypoint->interface_variable_count;
    for (uint32_t i = 0; i < spvreflectentrypoint->interface_variable_count; ++i)
    {
        recursive_spvreflectinterfacevariable(json_output["interface_variables"][i], spvreflectentrypoint->interface_variables[i]);
    }

    json_output["descriptor_set_count"] = spvreflectentrypoint->descriptor_set_count;
    for (uint32_t i = 0; i < spvreflectentrypoint->descriptor_set_count; ++i)
    {
        for (uint32_t binding = 0; binding < spvreflectentrypoint->descriptor_sets[i].binding_count; ++binding)
        {
            recursive_spvreflectdescriptorbinding(json_output["descriptor_set"][i]["binding"][binding], spvreflectentrypoint->descriptor_sets[i].bindings[binding]);
        }
    }

    json_output["used_uniform_count"] = spvreflectentrypoint->used_uniform_count;
    for (uint32_t i = 0; i < spvreflectentrypoint->used_uniform_count; ++i)
    {
        json_output["used_uniforms"][i] = spvreflectentrypoint->used_uniforms[i];
    }

    json_output["used_push_constant_count"] = spvreflectentrypoint->used_push_constant_count;
    for (uint32_t i = 0; i < spvreflectentrypoint->used_push_constant_count; ++i)
    {
        json_output["used_push_constants"][i] = spvreflectentrypoint->used_push_constants[i];
    }

    json_output["local_size"]["x"] = spvreflectentrypoint->local_size.x;
    json_output["local_size"]["y"] = spvreflectentrypoint->local_size.y;
    json_output["local_size"]["z"] = spvreflectentrypoint->local_size.z;

    // write JSON to another file
    std::ofstream o((file + ".json").c_str());
    o << std::setw(4) << json_output << std::endl;
}

void iterate(const std::filesystem::path path)
{
    for (auto& p : std::filesystem::directory_iterator(path))
    {
        if (p.is_directory())
        {
            iterate(p.path());
        }
        else
        {
            // check shader in here
            const std::string file = p.path().string();

            const std::string format = file.substr(file.find_last_of("."));
            if (format.find(".frag") != -1 ||
                format.find(".ver") != -1) // TODO: need to add remaining used shaders in here, but right now, just testing for vertex and fragments !!
            {
                // workaround by now :(
                // the idea is to get the shader hexadecimal code inside each file
                // convert it to vector of uint32_t
                // perform shader reflection
                // generate a JSON file with all the information for that shader
                // ideally I would not need to convert the string format to uint32
                // but that means doing something that I do not know hot to do
                // loading/unloading a c++ haeder like file auto generated from glslang (which is working now)
                // but I have no idea how to dyanamically linking that array

                // we found the shader code, replace the file, so it points to the hexadecimal file we want
                std::string   hexadecimal_file = file + "_hex.spv";
                std::ifstream is(hexadecimal_file, std::ios::binary | std::ios::in | std::ios::ate);

                char* file_content = nullptr;
                if (is.is_open())
                {
                    const uint32_t file_size = is.tellg();
                    is.seekg(0, std::ios::beg);
                    // Copy file contents into a buffer
                    file_content = new char[file_size];
                    is.read(file_content, file_size);
                    is.close();
                }

                std::string code = file_content;
                if (file_content != nullptr)
                {
                    // ugly free for the file loaded in here
                    free(file_content);
                }

                //  create the vector using the string data... (need to replace this, since is horrible!!)
                std::vector<uint32_t> hexadecimal_code;
                code = code.substr(code.find("0x"));
                while (!code.empty())
                {
                    auto&& index = code.find(",");
                    if (index != -1)
                    {
                        unsigned int      x;
                        std::stringstream hex_string;
                        hex_string << std::hex << code.substr(0, index).c_str();
                        uint32_t value;
                        hex_string >> value;
                        hexadecimal_code.push_back(value);
                    }
                    // next hex value
                    auto&& next_index = code.find(",");
                    if (next_index != -1)
                    {
                        code = code.substr(next_index + 1);
                    }
                    else
                    {
                        code.clear();
                    }
                }

                SpvReflectShaderModule module;

                SpvReflectResult result = spvReflectCreateShaderModule(sizeof(uint32_t) * hexadecimal_code.size(), hexadecimal_code.data(), &module);
                assert(result == SPV_REFLECT_RESULT_SUCCESS);

                // Enumerate and extract shader's input variables
                char*  entry_point           = "main";
                auto&& reflected_entry_point = spvReflectGetEntryPoint(&module, entry_point);

                create_json_reflection(reflected_entry_point, file);
                if (reflected_entry_point)
                {
                    // Destroy the reflection data when no longer required.
                    spvReflectDestroyShaderModule(&module);
                }
            }
        }
    }
}

int main()
{
    const std::string     shader_root_path = "../engine/data/shaders/glsl";
    std::filesystem::path shaders_path     = shader_root_path;

    for (auto& p : std::filesystem::directory_iterator("../engine/data/shaders/glsl"))
    {
        if (p.is_directory())
        {
            iterate(p.path());
        }
    }

    return 0;
}

/*

    const Parameter& fragment_output_parameter = std::get<Parameter>(task_description.m_depth_output);
    // load with default attachment values
    // this will need to be loaded from the task description file
    const TaskResourceConnection& resource_connection   = task.m_task_resources[fragment_output_parameter];
    const Resource&               resource_handle       = *resource_connection.m_resource;
    ColourAttachment&             actual_depth_resource = m_resources.get_colour_attachment(*task.m_task_resources[depth_attachment_id].m_resource);
    const TextureInfo&            texture_description   = actual_depth_resource.m_render_texture_info;
    VkAttachmentDescription       attachment_description;
    attachment_description.flags   = 0;
    attachment_description.format  = texture_description.format;
    attachment_description.samples = texture_description.samples;
    // if is the first usage, get it from the texture info, otherwise, get the initial layout from the previous task usage of this
    // if any other pass is using it, get the layout that this needs to have for that pass to be used
    const bool    from_previous_task = std::get<Parameter>(resource_connection.m_source_resource_data).is_valid();
    VkImageLayout initial_layout     = texture_description.initialLayout;
    // if (!first_usage_of_the_resource)
    {
        if (from_previous_task)
        {
            Task&            previous_task             = *m_tasks[resource_connection.m_source];
            TaskDescription& previous_task_description = *m_task_descriptions[previous_task.m_task_description_id];
            initial_layout = get_image_layout_from_task_description(previous_task_description, std::get<Parameter>(resource_connection.m_source_resource_data));
        }
    }
    attachment_description.initialLayout = initial_layout
    VkImageLayout final_layout = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL;
    if (!is_last_one)
    {
        // try to get the target task, and guess its image_layout
        Task&            target_task             = *m_tasks[resource_connection.m_target];
        TaskDescription& target_task_description = *m_task_descriptions[target_task.m_task_description_id];
        final_layout = get_image_layout_from_task_description(target_task_description, std::get<Parameter>(resource_connection.m_target_resource_data));
    }
    // deduct from the graph
    attachment_description.finalLayout = final_layout
    // set by client?
    // except if memory aliasing resources?
    attachment_description.stencilLoadOp  = texture_description.stencilLoadOp;
    attachment_description.stencilStoreOp = texture_description.stencilStoreOp;
    // deduct from the graph?
    attachment_description.loadOp  = texture_description.loadOp;
    attachment_description.storeOp = texture_description.storeOp
    const uint32_t attachment_location = attachment_descriptions.size();
    attachment_descriptions.push_back(attachment_description
    depth_attachment.attachment = attachment_location;
    depth_attachment.layout     = VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL;
    depth_attachment_ref        = &depth_attachment;
*/
